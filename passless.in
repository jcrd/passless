#!/bin/bash

# This project is licensed under the MIT License (see LICENSE).

set -euo pipefail

readonly VERSION=

readonly default_config='[DEFAULT]
lowercase=true
uppercase=true
digits=true
symbols=true'

config="${PASSLESS_CONFIG:-$HOME/.passless.conf.gpg}"

decrypted=
trap 'rm -f "$decrypted"' EXIT INT TERM

usage() {
    echo 'usage: passless [options] [SITE]

options:
  -h         Show help message
  -f CONFIG  Path to config file
  -i FILE    Encrypt existing file
  -e         Edit config file
  -l LOGIN   Get password of SITE with given login
  -L         List sites and logins
  -c         Copy password to clipboard
  -v         Show version'
}

decrypt() {
    decrypted=$(mktemp)

    if [[ -n "${PASSLESS_PLAIN_FILE-}" ]]; then
        cat "$config" > "$decrypted"
    else
        gpg -d "$config" > "$decrypted" 2> /dev/null
    fi
}

encrypt() {
    local f="${1-$decrypted}"

    if [[ -n "${PASSLESS_PLAIN_FILE-}" ]]; then
        cat "$f" > "$config"
    else
        gpg --default-recipient-self -o "$config" -e "$f"
    fi
}

edit_config() {
    if [[ ! -e "$config" ]]; then
        decrypted=$(mktemp)
        echo "$default_config" > "$decrypted"
    else
        decrypt
    fi
    $EDITOR "$decrypted"
    encrypt
}

handle_bool() {
    [[ "$1" == true ]] && echo "$2" || echo "$3"
}

get_section() {
    local name="${1//\./\\.}"
    local opts=''
    local i=0
    local n

    shift
    if ! n="$(iniq -p "$name" -n "$decrypted")"; then
        echo "Section not found: $name" >&2
        exit 2
    fi

    while (( i < n )); do
        opts="$(iniq -p "$name" -i $i "$decrypted")"
        [[ -z "$1" ]] && break
        while IFS='=' read -r k v; do
            [[ "$k" == login && "$v" == "$1" ]] && break
        done <<< "$opts"
        i=$((i + 1))
    done

    echo "$opts"
}

generate_password() {
    local master=''
    local login=''
    local args=''
    local opts

    decrypt
    opts="$(get_section "$@")"

    while IFS='=' read -r k v; do
        case $k in
            master_password) master="$v" ;;
            login) login="$v" ;;
            length) args+=" -L $v" ;;
            counter) args+=" -C $v" ;;
            lowercase) args+=" $(handle_bool "$v" '-l' '--no-lowercase')" ;;
            uppercase) args+=" $(handle_bool "$v" '-u' '--no-uppercase')" ;;
            digits) args+=" $(handle_bool "$v" '-d' '--no-digits')" ;;
            symbols) args+=" $(handle_bool "$v" '-s' '--no-symbols')" ;;
            *)
                echo "Invalid key: $k" >&2
                exit 1
        esac
    done <<< "$opts"

    args="$1 $login $master ${copy+-c} $args"

    lesspass $args
    exit
}

while getopts ':hf:i:el:Lcv' opt; do
    case "$opt" in
        h) usage; exit ;;
        f) config="$OPTARG" ;;
        i) encrypt "$OPTARG" ;;
        e) edit_config; exit ;;
        l) with_login="$OPTARG" ;;
        L) show_login=true ;;
        c) copy=true ;;
        v) echo "$VERSION"; exit ;;
        *) usage >&2; exit 2
    esac
done

shift $((OPTIND - 1))

if [[ ! -e "$config" ]]; then
    echo "$config does not exist; use '-e' to create it" >&2
    exit 1
fi

[[ $# -gt 0 ]] && generate_password "$1" "${with_login-}"

if ${copy-false}; then
    echo "'-c' requires a site to be specified" >&2
    usage >&2
    exit 2
fi

decrypt

if ${show_login-false}; then
    while read -r line; do
        awk '
        {
            x=1
            while (x<=NF) {
                split($x,a,"=")
                if (a[1] == "section") printf "%s", a[2]
                else if (a[1] == "login") printf " (%s)\n", a[2]
                x++
            }
        }' <<< "$line"
    done < <(iniq -o "$decrypted")
else
    iniq "$decrypted"
fi
